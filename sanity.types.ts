/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Documento = {
  _id: string;
  _type: "documento";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  federation?: "Regionale" | "Udine" | "Gorizia" | "Pordenone" | "Trieste" | "Comm. Garanzia";
  publishedAt?: string;
  file?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  cardImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  postImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  federation?: "Regionale" | "Udine" | "Gorizia" | "Pordenone" | "Trieste" | "Comm. Garanzia";
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  documents?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "documento";
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Documento | Post | BlockContent | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: postQuery
// Query: *[_type == "post" && _id == $id][0]{  _id,  _createdAt,  title,  slug,  federation,  publishedAt,  cardImage,  postImage,  "cardImageURL": cardImage.asset->url,  "postImageURL": postImage.asset->url,  body,  documents[]->{    _id,    title,    "fileURL": file.asset->url,    federation,    publishedAt  }}
export type PostQueryResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  slug: Slug | null;
  federation: "Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null;
  publishedAt: string | null;
  cardImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  postImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  cardImageURL: string | null;
  postImageURL: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  documents: Array<{
    _id: string;
    title: string | null;
    fileURL: string | null;
    federation: "Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null;
    publishedAt: string | null;
  }> | null;
} | null;
// Variable: lastPostsQuery
// Query: *[_type == "post"] | order(publishedAt desc)[0...4] {  _id,  _createdAt,  title,  slug,  federation,  publishedAt,  cardImage,  postImage,  "cardImageURL": cardImage.asset->url,  "postImageURL": postImage.asset->url,  body,  documents[]->{    _id,    title,    "fileURL": file.asset->url,    federation,    publishedAt  }}
export type LastPostsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  slug: Slug | null;
  federation: "Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null;
  publishedAt: string | null;
  cardImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  postImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  cardImageURL: string | null;
  postImageURL: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  documents: Array<{
    _id: string;
    title: string | null;
    fileURL: string | null;
    federation: "Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null;
    publishedAt: string | null;
  }> | null;
}>;
// Variable: postsByFederationQuery
// Query: *[_type == "post" && federation == $federation] | order(publishedAt desc)[0...4] {  _id,  _createdAt,  title,  slug,  federation,  publishedAt,  cardImage,  postImage,  "cardImageURL": cardImage.asset->url,  "postImageURL": postImage.asset->url,  body,  documents[]->{    _id,    title,    "fileURL": file.asset->url,    federation,    publishedAt  }}
export type PostsByFederationQueryResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  slug: Slug | null;
  federation: "Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null;
  publishedAt: string | null;
  cardImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  postImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  cardImageURL: string | null;
  postImageURL: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  documents: Array<{
    _id: string;
    title: string | null;
    fileURL: string | null;
    federation: "Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null;
    publishedAt: string | null;
  }> | null;
}>;
// Variable: federationsQuery
// Query: array::unique(*[_type == "post" && defined(federation)].federation)
export type FederationsQueryResult = Array<"Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null>;
// Variable: documentFederationsQuery
// Query: array::unique(*[_type == "documento" && defined(federation)].federation)
export type DocumentFederationsQueryResult = Array<"Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null>;
// Variable: documentsByFederationQuery
// Query: *[_type == "documento" && federation == $federation] | order(publishedAt desc)[0...4] {  _id,  _createdAt,  title,  slug,  federation,  publishedAt,  "fileURL": file.asset->url}
export type DocumentsByFederationQueryResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  slug: Slug | null;
  federation: "Comm. Garanzia" | "Gorizia" | "Pordenone" | "Regionale" | "Trieste" | "Udine" | null;
  publishedAt: string | null;
  fileURL: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"post\" && _id == $id][0]{\n  _id,\n  _createdAt,\n  title,\n  slug,\n  federation,\n  publishedAt,\n  cardImage,\n  postImage,\n  \"cardImageURL\": cardImage.asset->url,\n  \"postImageURL\": postImage.asset->url,\n  body,\n  documents[]->{\n    _id,\n    title,\n    \"fileURL\": file.asset->url,\n    federation,\n    publishedAt\n  }\n}": PostQueryResult;
    "*[_type == \"post\"] | order(publishedAt desc)[0...4] {\n  _id,\n  _createdAt,\n  title,\n  slug,\n  federation,\n  publishedAt,\n  cardImage,\n  postImage,\n  \"cardImageURL\": cardImage.asset->url,\n  \"postImageURL\": postImage.asset->url,\n  body,\n  documents[]->{\n    _id,\n    title,\n    \"fileURL\": file.asset->url,\n    federation,\n    publishedAt\n  }\n}": LastPostsQueryResult;
    "*[_type == \"post\" && federation == $federation] | order(publishedAt desc)[0...4] {\n  _id,\n  _createdAt,\n  title,\n  slug,\n  federation,\n  publishedAt,\n  cardImage,\n  postImage,\n  \"cardImageURL\": cardImage.asset->url,\n  \"postImageURL\": postImage.asset->url,\n  body,\n  documents[]->{\n    _id,\n    title,\n    \"fileURL\": file.asset->url,\n    federation,\n    publishedAt\n  }\n}": PostsByFederationQueryResult;
    "array::unique(*[_type == \"post\" && defined(federation)].federation)": FederationsQueryResult;
    "array::unique(*[_type == \"documento\" && defined(federation)].federation)": DocumentFederationsQueryResult;
    "*[_type == \"documento\" && federation == $federation] | order(publishedAt desc)[0...4] {\n  _id,\n  _createdAt,\n  title,\n  slug,\n  federation,\n  publishedAt,\n  \"fileURL\": file.asset->url\n}": DocumentsByFederationQueryResult;
  }
}
